import telebot
from telebot import types
import json
import os
import requests
from urllib.parse import urlencode

# –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
TOKEN = '7463432820:AAH98TsRf5yRAu2mspCtupZT9q-UhQHZ3Bw'
bot = telebot.TeleBot(TOKEN)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def load_phones():
    with open('phones.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def load_accessories():
    with open('accessories.json', 'r', encoding='utf-8') as f:
        return json.load(f)

phones = load_phones()
accessories = load_accessories()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∏
def load_phones_data():
    try:
        with open('phones.json', 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Å–µ—Å—É–∞—Ä–∏
def load_accessories_data():
    try:
        with open('accessories.json', 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ—à–∏–∫ –∑ —Ç–æ–≤–∞—Ä–æ–º
def create_cart_link(product_id):
    base_url = "http://127.0.0.1:5501/cart.html"
    params = {'product': product_id}
    return f"{base_url}?{urlencode(params)}"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
def is_image_available(url):
    try:
        response = requests.head(url)
        return response.status_code == 200
    except:
        return False

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    phones_btn = types.KeyboardButton('üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏')
    accessories_btn = types.KeyboardButton('üéß –ê–∫—Å–µ—Å—É–∞—Ä–∏')
    cart_btn = types.KeyboardButton('üõí –ö–æ—à–∏–∫')
    contacts_btn = types.KeyboardButton('üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏')
    markup.add(phones_btn, accessories_btn)
    markup.add(cart_btn, contacts_btn)
    return markup

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
def create_phone_filters():
    markup = types.InlineKeyboardMarkup(row_width=2)
    brands = list(set(phone['brand'] for phone in phones))
    for brand in brands:
        markup.add(types.InlineKeyboardButton(brand, callback_data=f'phone_brand_{brand}'))
    markup.add(types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main'))
    return markup

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤
def create_accessory_filters():
    markup = types.InlineKeyboardMarkup(row_width=2)
    types_list = list(set(accessory['type'] for accessory in accessories))
    for type_name in types_list:
        markup.add(types.InlineKeyboardButton(type_name, callback_data=f'accessory_type_{type_name}'))
    markup.add(types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main'))
    return markup

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
def send_phones_catalog(message, phones_to_show=None):
    if phones_to_show is None:
        phones_to_show = phones
    
    for phone in phones_to_show:
        try:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ
            with open(f"images/{phone['model'].lower().replace(' ', '')}.jpg", 'rb') as photo:
                caption = f"üì± {phone['brand']} {phone['model']}\n"
                caption += f"üí∞ –¶—ñ–Ω–∞: {phone['price']} –≥—Ä–Ω\n"
                caption += f"üìù {phone['description']}"
                
                markup = types.InlineKeyboardMarkup()
                buy_btn = types.InlineKeyboardButton('üõí –ö—É–ø–∏—Ç–∏', callback_data=f'buy_phone_{phone["model"]}')
                markup.add(buy_btn)
                
                bot.send_photo(message.chat.id, photo, caption=caption, reply_markup=markup)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ç–æ {phone['model']}: {e}")
            # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
            caption = f"üì± {phone['brand']} {phone['model']}\n"
            caption += f"üí∞ –¶—ñ–Ω–∞: {phone['price']} –≥—Ä–Ω\n"
            caption += f"üìù {phone['description']}"
            
            markup = types.InlineKeyboardMarkup()
            buy_btn = types.InlineKeyboardButton('üõí –ö—É–ø–∏—Ç–∏', callback_data=f'buy_phone_{phone["model"]}')
            markup.add(buy_btn)
            
            bot.send_message(message.chat.id, caption, reply_markup=markup)

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥—É –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤
def send_accessories_catalog(message, accessories_to_show=None):
    if accessories_to_show is None:
        accessories_to_show = accessories
    
    for accessory in accessories_to_show:
        try:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ
            with open(accessory['image'], 'rb') as photo:
                caption = f"üéß {accessory['name']}\n"
                caption += f"üí∞ –¶—ñ–Ω–∞: {accessory['price']} –≥—Ä–Ω\n"
                caption += f"üìù {accessory['description']}"
                
                markup = types.InlineKeyboardMarkup()
                buy_btn = types.InlineKeyboardButton('üõí –ö—É–ø–∏—Ç–∏', callback_data=f'buy_accessory_{accessory["name"]}')
                markup.add(buy_btn)
                
                bot.send_photo(message.chat.id, photo, caption=caption, reply_markup=markup)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ç–æ {accessory['name']}: {e}")
            # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
            caption = f"üéß {accessory['name']}\n"
            caption += f"üí∞ –¶—ñ–Ω–∞: {accessory['price']} –≥—Ä–Ω\n"
            caption += f"üìù {accessory['description']}"
            
            markup = types.InlineKeyboardMarkup()
            buy_btn = types.InlineKeyboardButton('üõí –ö—É–ø–∏—Ç–∏', callback_data=f'buy_accessory_{accessory["name"]}')
            markup.add(buy_btn)
            
            bot.send_message(message.chat.id, caption, reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start'])
def start(message):
    welcome_text = "üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É MobiWorld.\n\n"
    welcome_text += "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:"
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_main_menu())

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    if message.text == 'üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏':
        markup = create_phone_filters()
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥:", reply_markup=markup)
    elif message.text == 'üéß –ê–∫—Å–µ—Å—É–∞—Ä–∏':
        markup = create_accessory_filters()
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–∫—Å–µ—Å—É–∞—Ä–∞:", reply_markup=markup)
    elif message.text == 'üõí –ö–æ—à–∏–∫':
        bot.send_message(message.chat.id, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
    elif message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏':
        contacts_text = "üìû –ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏:\n\n"
        contacts_text += "üìç –ê–¥—Ä–µ—Å–∞: –º. –ö–∏—ó–≤, –≤—É–ª. –ü—Ä–∏–∫–ª–∞–¥–Ω–∞, 1\n"
        contacts_text += "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +380 (44) 123-45-67\n"
        contacts_text += "‚úâÔ∏è Email: info@mobiworld.com\n"
        contacts_text += "üåê –°–∞–π—Ç: www.mobiworld.com"
        bot.send_message(message.chat.id, contacts_text)

# –û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith('phone_brand_'):
        brand = call.data.split('_')[2]
        filtered_phones = [phone for phone in phones if phone['brand'] == brand]
        send_phones_catalog(call.message, filtered_phones)
    elif call.data.startswith('accessory_type_'):
        type_name = call.data.split('_')[2]
        filtered_accessories = [acc for acc in accessories if acc['type'] == type_name]
        send_accessories_catalog(call.message, filtered_accessories)
    elif call.data == 'back_to_main':
        bot.send_message(call.message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", reply_markup=create_main_menu())
    elif call.data.startswith('buy_'):
        item_type = call.data.split('_')[1]
        item_name = call.data.split('_')[2]
        bot.send_message(call.message.chat.id, f"üõí –¢–æ–≤–∞—Ä {item_name} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.polling(none_stop=True) 